// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1a "github.com/rancher/gitwatcher/pkg/apis/gitwatcher.cattle.io/v1"
	v1 "github.com/rancher/gitwatcher/pkg/generated/controllers/gitwatcher.cattle.io/v1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockGitCommitControllerMockAddGenericHandler       sync.RWMutex
	lockGitCommitControllerMockAddGenericRemoveHandler sync.RWMutex
	lockGitCommitControllerMockCache                   sync.RWMutex
	lockGitCommitControllerMockCreate                  sync.RWMutex
	lockGitCommitControllerMockDelete                  sync.RWMutex
	lockGitCommitControllerMockEnqueue                 sync.RWMutex
	lockGitCommitControllerMockGet                     sync.RWMutex
	lockGitCommitControllerMockGroupVersionKind        sync.RWMutex
	lockGitCommitControllerMockInformer                sync.RWMutex
	lockGitCommitControllerMockList                    sync.RWMutex
	lockGitCommitControllerMockOnChange                sync.RWMutex
	lockGitCommitControllerMockOnRemove                sync.RWMutex
	lockGitCommitControllerMockPatch                   sync.RWMutex
	lockGitCommitControllerMockUpdate                  sync.RWMutex
	lockGitCommitControllerMockUpdateStatus            sync.RWMutex
	lockGitCommitControllerMockUpdater                 sync.RWMutex
	lockGitCommitControllerMockWatch                   sync.RWMutex
)

// Ensure, that GitCommitControllerMock does implement GitCommitController.
// If this is not the case, regenerate this file with moq.
var _ v1.GitCommitController = &GitCommitControllerMock{}

// GitCommitControllerMock is a mock implementation of GitCommitController.
//
//     func TestSomethingThatUsesGitCommitController(t *testing.T) {
//
//         // make and configure a mocked GitCommitController
//         mockedGitCommitController := &GitCommitControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1.GitCommitCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1a.GitCommit) (*v1a.GitCommit, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.GitCommit, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.GitCommitList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1.GitCommitHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1.GitCommitHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitCommit, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.GitCommit) (*v1a.GitCommit, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.GitCommit) (*v1a.GitCommit, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedGitCommitController in code that requires GitCommitController
//         // and then make assertions.
//
//     }
type GitCommitControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1.GitCommitCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.GitCommit) (*v1a.GitCommit, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.GitCommit, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.GitCommitList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1.GitCommitHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1.GitCommitHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitCommit, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.GitCommit) (*v1a.GitCommit, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.GitCommit) (*v1a.GitCommit, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitCommit
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.GitCommitHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.GitCommitHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitCommit
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitCommit
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *GitCommitControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("GitCommitControllerMock.AddGenericHandlerFunc: method is nil but GitCommitController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockGitCommitControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockGitCommitControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedGitCommitController.AddGenericHandlerCalls())
func (mock *GitCommitControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockGitCommitControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockGitCommitControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *GitCommitControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("GitCommitControllerMock.AddGenericRemoveHandlerFunc: method is nil but GitCommitController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockGitCommitControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockGitCommitControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedGitCommitController.AddGenericRemoveHandlerCalls())
func (mock *GitCommitControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockGitCommitControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockGitCommitControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *GitCommitControllerMock) Cache() v1.GitCommitCache {
	if mock.CacheFunc == nil {
		panic("GitCommitControllerMock.CacheFunc: method is nil but GitCommitController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockGitCommitControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockGitCommitControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedGitCommitController.CacheCalls())
func (mock *GitCommitControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockGitCommitControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockGitCommitControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *GitCommitControllerMock) Create(in1 *v1a.GitCommit) (*v1a.GitCommit, error) {
	if mock.CreateFunc == nil {
		panic("GitCommitControllerMock.CreateFunc: method is nil but GitCommitController.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.GitCommit
	}{
		In1: in1,
	}
	lockGitCommitControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockGitCommitControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedGitCommitController.CreateCalls())
func (mock *GitCommitControllerMock) CreateCalls() []struct {
	In1 *v1a.GitCommit
} {
	var calls []struct {
		In1 *v1a.GitCommit
	}
	lockGitCommitControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockGitCommitControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *GitCommitControllerMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("GitCommitControllerMock.DeleteFunc: method is nil but GitCommitController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGitCommitControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockGitCommitControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedGitCommitController.DeleteCalls())
func (mock *GitCommitControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockGitCommitControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockGitCommitControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *GitCommitControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("GitCommitControllerMock.EnqueueFunc: method is nil but GitCommitController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockGitCommitControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockGitCommitControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedGitCommitController.EnqueueCalls())
func (mock *GitCommitControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockGitCommitControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockGitCommitControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GitCommitControllerMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.GitCommit, error) {
	if mock.GetFunc == nil {
		panic("GitCommitControllerMock.GetFunc: method is nil but GitCommitController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGitCommitControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGitCommitControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGitCommitController.GetCalls())
func (mock *GitCommitControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockGitCommitControllerMockGet.RLock()
	calls = mock.calls.Get
	lockGitCommitControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *GitCommitControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("GitCommitControllerMock.GroupVersionKindFunc: method is nil but GitCommitController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockGitCommitControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockGitCommitControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedGitCommitController.GroupVersionKindCalls())
func (mock *GitCommitControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockGitCommitControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockGitCommitControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *GitCommitControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("GitCommitControllerMock.InformerFunc: method is nil but GitCommitController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockGitCommitControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockGitCommitControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedGitCommitController.InformerCalls())
func (mock *GitCommitControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockGitCommitControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockGitCommitControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GitCommitControllerMock) List(namespace string, opts v1b.ListOptions) (*v1a.GitCommitList, error) {
	if mock.ListFunc == nil {
		panic("GitCommitControllerMock.ListFunc: method is nil but GitCommitController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGitCommitControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGitCommitControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGitCommitController.ListCalls())
func (mock *GitCommitControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockGitCommitControllerMockList.RLock()
	calls = mock.calls.List
	lockGitCommitControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *GitCommitControllerMock) OnChange(ctx context.Context, name string, sync v1.GitCommitHandler) {
	if mock.OnChangeFunc == nil {
		panic("GitCommitControllerMock.OnChangeFunc: method is nil but GitCommitController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.GitCommitHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockGitCommitControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockGitCommitControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedGitCommitController.OnChangeCalls())
func (mock *GitCommitControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.GitCommitHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.GitCommitHandler
	}
	lockGitCommitControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockGitCommitControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *GitCommitControllerMock) OnRemove(ctx context.Context, name string, sync v1.GitCommitHandler) {
	if mock.OnRemoveFunc == nil {
		panic("GitCommitControllerMock.OnRemoveFunc: method is nil but GitCommitController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.GitCommitHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockGitCommitControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockGitCommitControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedGitCommitController.OnRemoveCalls())
func (mock *GitCommitControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.GitCommitHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.GitCommitHandler
	}
	lockGitCommitControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockGitCommitControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *GitCommitControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitCommit, error) {
	if mock.PatchFunc == nil {
		panic("GitCommitControllerMock.PatchFunc: method is nil but GitCommitController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockGitCommitControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockGitCommitControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedGitCommitController.PatchCalls())
func (mock *GitCommitControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockGitCommitControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockGitCommitControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *GitCommitControllerMock) Update(in1 *v1a.GitCommit) (*v1a.GitCommit, error) {
	if mock.UpdateFunc == nil {
		panic("GitCommitControllerMock.UpdateFunc: method is nil but GitCommitController.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.GitCommit
	}{
		In1: in1,
	}
	lockGitCommitControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockGitCommitControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedGitCommitController.UpdateCalls())
func (mock *GitCommitControllerMock) UpdateCalls() []struct {
	In1 *v1a.GitCommit
} {
	var calls []struct {
		In1 *v1a.GitCommit
	}
	lockGitCommitControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockGitCommitControllerMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *GitCommitControllerMock) UpdateStatus(in1 *v1a.GitCommit) (*v1a.GitCommit, error) {
	if mock.UpdateStatusFunc == nil {
		panic("GitCommitControllerMock.UpdateStatusFunc: method is nil but GitCommitController.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.GitCommit
	}{
		In1: in1,
	}
	lockGitCommitControllerMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockGitCommitControllerMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedGitCommitController.UpdateStatusCalls())
func (mock *GitCommitControllerMock) UpdateStatusCalls() []struct {
	In1 *v1a.GitCommit
} {
	var calls []struct {
		In1 *v1a.GitCommit
	}
	lockGitCommitControllerMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockGitCommitControllerMockUpdateStatus.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *GitCommitControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("GitCommitControllerMock.UpdaterFunc: method is nil but GitCommitController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockGitCommitControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockGitCommitControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedGitCommitController.UpdaterCalls())
func (mock *GitCommitControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockGitCommitControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockGitCommitControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *GitCommitControllerMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("GitCommitControllerMock.WatchFunc: method is nil but GitCommitController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGitCommitControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockGitCommitControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedGitCommitController.WatchCalls())
func (mock *GitCommitControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockGitCommitControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockGitCommitControllerMockWatch.RUnlock()
	return calls
}

var (
	lockGitCommitClientMockCreate       sync.RWMutex
	lockGitCommitClientMockDelete       sync.RWMutex
	lockGitCommitClientMockGet          sync.RWMutex
	lockGitCommitClientMockList         sync.RWMutex
	lockGitCommitClientMockPatch        sync.RWMutex
	lockGitCommitClientMockUpdate       sync.RWMutex
	lockGitCommitClientMockUpdateStatus sync.RWMutex
	lockGitCommitClientMockWatch        sync.RWMutex
)

// Ensure, that GitCommitClientMock does implement GitCommitClient.
// If this is not the case, regenerate this file with moq.
var _ v1.GitCommitClient = &GitCommitClientMock{}

// GitCommitClientMock is a mock implementation of GitCommitClient.
//
//     func TestSomethingThatUsesGitCommitClient(t *testing.T) {
//
//         // make and configure a mocked GitCommitClient
//         mockedGitCommitClient := &GitCommitClientMock{
//             CreateFunc: func(in1 *v1a.GitCommit) (*v1a.GitCommit, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.GitCommit, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.GitCommitList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitCommit, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.GitCommit) (*v1a.GitCommit, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.GitCommit) (*v1a.GitCommit, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedGitCommitClient in code that requires GitCommitClient
//         // and then make assertions.
//
//     }
type GitCommitClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.GitCommit) (*v1a.GitCommit, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.GitCommit, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.GitCommitList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitCommit, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.GitCommit) (*v1a.GitCommit, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.GitCommit) (*v1a.GitCommit, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitCommit
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitCommit
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitCommit
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *GitCommitClientMock) Create(in1 *v1a.GitCommit) (*v1a.GitCommit, error) {
	if mock.CreateFunc == nil {
		panic("GitCommitClientMock.CreateFunc: method is nil but GitCommitClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.GitCommit
	}{
		In1: in1,
	}
	lockGitCommitClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockGitCommitClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedGitCommitClient.CreateCalls())
func (mock *GitCommitClientMock) CreateCalls() []struct {
	In1 *v1a.GitCommit
} {
	var calls []struct {
		In1 *v1a.GitCommit
	}
	lockGitCommitClientMockCreate.RLock()
	calls = mock.calls.Create
	lockGitCommitClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *GitCommitClientMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("GitCommitClientMock.DeleteFunc: method is nil but GitCommitClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGitCommitClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockGitCommitClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedGitCommitClient.DeleteCalls())
func (mock *GitCommitClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockGitCommitClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockGitCommitClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GitCommitClientMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.GitCommit, error) {
	if mock.GetFunc == nil {
		panic("GitCommitClientMock.GetFunc: method is nil but GitCommitClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGitCommitClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGitCommitClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGitCommitClient.GetCalls())
func (mock *GitCommitClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockGitCommitClientMockGet.RLock()
	calls = mock.calls.Get
	lockGitCommitClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GitCommitClientMock) List(namespace string, opts v1b.ListOptions) (*v1a.GitCommitList, error) {
	if mock.ListFunc == nil {
		panic("GitCommitClientMock.ListFunc: method is nil but GitCommitClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGitCommitClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGitCommitClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGitCommitClient.ListCalls())
func (mock *GitCommitClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockGitCommitClientMockList.RLock()
	calls = mock.calls.List
	lockGitCommitClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *GitCommitClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitCommit, error) {
	if mock.PatchFunc == nil {
		panic("GitCommitClientMock.PatchFunc: method is nil but GitCommitClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockGitCommitClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockGitCommitClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedGitCommitClient.PatchCalls())
func (mock *GitCommitClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockGitCommitClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockGitCommitClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *GitCommitClientMock) Update(in1 *v1a.GitCommit) (*v1a.GitCommit, error) {
	if mock.UpdateFunc == nil {
		panic("GitCommitClientMock.UpdateFunc: method is nil but GitCommitClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.GitCommit
	}{
		In1: in1,
	}
	lockGitCommitClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockGitCommitClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedGitCommitClient.UpdateCalls())
func (mock *GitCommitClientMock) UpdateCalls() []struct {
	In1 *v1a.GitCommit
} {
	var calls []struct {
		In1 *v1a.GitCommit
	}
	lockGitCommitClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockGitCommitClientMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *GitCommitClientMock) UpdateStatus(in1 *v1a.GitCommit) (*v1a.GitCommit, error) {
	if mock.UpdateStatusFunc == nil {
		panic("GitCommitClientMock.UpdateStatusFunc: method is nil but GitCommitClient.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.GitCommit
	}{
		In1: in1,
	}
	lockGitCommitClientMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockGitCommitClientMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedGitCommitClient.UpdateStatusCalls())
func (mock *GitCommitClientMock) UpdateStatusCalls() []struct {
	In1 *v1a.GitCommit
} {
	var calls []struct {
		In1 *v1a.GitCommit
	}
	lockGitCommitClientMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockGitCommitClientMockUpdateStatus.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *GitCommitClientMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("GitCommitClientMock.WatchFunc: method is nil but GitCommitClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGitCommitClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockGitCommitClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedGitCommitClient.WatchCalls())
func (mock *GitCommitClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockGitCommitClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockGitCommitClientMockWatch.RUnlock()
	return calls
}

var (
	lockGitCommitCacheMockAddIndexer sync.RWMutex
	lockGitCommitCacheMockGet        sync.RWMutex
	lockGitCommitCacheMockGetByIndex sync.RWMutex
	lockGitCommitCacheMockList       sync.RWMutex
)

// Ensure, that GitCommitCacheMock does implement GitCommitCache.
// If this is not the case, regenerate this file with moq.
var _ v1.GitCommitCache = &GitCommitCacheMock{}

// GitCommitCacheMock is a mock implementation of GitCommitCache.
//
//     func TestSomethingThatUsesGitCommitCache(t *testing.T) {
//
//         // make and configure a mocked GitCommitCache
//         mockedGitCommitCache := &GitCommitCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1.GitCommitIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1a.GitCommit, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1a.GitCommit, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1a.GitCommit, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedGitCommitCache in code that requires GitCommitCache
//         // and then make assertions.
//
//     }
type GitCommitCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1.GitCommitIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1a.GitCommit, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1a.GitCommit, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1a.GitCommit, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1.GitCommitIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *GitCommitCacheMock) AddIndexer(indexName string, indexer v1.GitCommitIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("GitCommitCacheMock.AddIndexerFunc: method is nil but GitCommitCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1.GitCommitIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockGitCommitCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockGitCommitCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedGitCommitCache.AddIndexerCalls())
func (mock *GitCommitCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1.GitCommitIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1.GitCommitIndexer
	}
	lockGitCommitCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockGitCommitCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GitCommitCacheMock) Get(namespace string, name string) (*v1a.GitCommit, error) {
	if mock.GetFunc == nil {
		panic("GitCommitCacheMock.GetFunc: method is nil but GitCommitCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockGitCommitCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGitCommitCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGitCommitCache.GetCalls())
func (mock *GitCommitCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockGitCommitCacheMockGet.RLock()
	calls = mock.calls.Get
	lockGitCommitCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *GitCommitCacheMock) GetByIndex(indexName string, key string) ([]*v1a.GitCommit, error) {
	if mock.GetByIndexFunc == nil {
		panic("GitCommitCacheMock.GetByIndexFunc: method is nil but GitCommitCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockGitCommitCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockGitCommitCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedGitCommitCache.GetByIndexCalls())
func (mock *GitCommitCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockGitCommitCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockGitCommitCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GitCommitCacheMock) List(namespace string, selector labels.Selector) ([]*v1a.GitCommit, error) {
	if mock.ListFunc == nil {
		panic("GitCommitCacheMock.ListFunc: method is nil but GitCommitCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockGitCommitCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGitCommitCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGitCommitCache.ListCalls())
func (mock *GitCommitCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockGitCommitCacheMockList.RLock()
	calls = mock.calls.List
	lockGitCommitCacheMockList.RUnlock()
	return calls
}
