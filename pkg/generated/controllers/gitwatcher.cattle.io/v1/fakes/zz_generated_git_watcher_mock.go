// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	v1a "github.com/rancher/gitwatcher/pkg/apis/gitwatcher.cattle.io/v1"
	v1 "github.com/rancher/gitwatcher/pkg/generated/controllers/gitwatcher.cattle.io/v1"
	generic "github.com/rancher/wrangler/pkg/generic"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockGitWatcherControllerMockAddGenericHandler       sync.RWMutex
	lockGitWatcherControllerMockAddGenericRemoveHandler sync.RWMutex
	lockGitWatcherControllerMockCache                   sync.RWMutex
	lockGitWatcherControllerMockCreate                  sync.RWMutex
	lockGitWatcherControllerMockDelete                  sync.RWMutex
	lockGitWatcherControllerMockEnqueue                 sync.RWMutex
	lockGitWatcherControllerMockGet                     sync.RWMutex
	lockGitWatcherControllerMockGroupVersionKind        sync.RWMutex
	lockGitWatcherControllerMockInformer                sync.RWMutex
	lockGitWatcherControllerMockList                    sync.RWMutex
	lockGitWatcherControllerMockOnChange                sync.RWMutex
	lockGitWatcherControllerMockOnRemove                sync.RWMutex
	lockGitWatcherControllerMockPatch                   sync.RWMutex
	lockGitWatcherControllerMockUpdate                  sync.RWMutex
	lockGitWatcherControllerMockUpdateStatus            sync.RWMutex
	lockGitWatcherControllerMockUpdater                 sync.RWMutex
	lockGitWatcherControllerMockWatch                   sync.RWMutex
)

// Ensure, that GitWatcherControllerMock does implement GitWatcherController.
// If this is not the case, regenerate this file with moq.
var _ v1.GitWatcherController = &GitWatcherControllerMock{}

// GitWatcherControllerMock is a mock implementation of GitWatcherController.
//
//     func TestSomethingThatUsesGitWatcherController(t *testing.T) {
//
//         // make and configure a mocked GitWatcherController
//         mockedGitWatcherController := &GitWatcherControllerMock{
//             AddGenericHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericHandler method")
//             },
//             AddGenericRemoveHandlerFunc: func(ctx context.Context, name string, handler generic.Handler)  {
// 	               panic("mock out the AddGenericRemoveHandler method")
//             },
//             CacheFunc: func() v1.GitWatcherCache {
// 	               panic("mock out the Cache method")
//             },
//             CreateFunc: func(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.GitWatcher, error) {
// 	               panic("mock out the Get method")
//             },
//             GroupVersionKindFunc: func() schema.GroupVersionKind {
// 	               panic("mock out the GroupVersionKind method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.GitWatcherList, error) {
// 	               panic("mock out the List method")
//             },
//             OnChangeFunc: func(ctx context.Context, name string, sync v1.GitWatcherHandler)  {
// 	               panic("mock out the OnChange method")
//             },
//             OnRemoveFunc: func(ctx context.Context, name string, sync v1.GitWatcherHandler)  {
// 	               panic("mock out the OnRemove method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitWatcher, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             UpdaterFunc: func() generic.Updater {
// 	               panic("mock out the Updater method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedGitWatcherController in code that requires GitWatcherController
//         // and then make assertions.
//
//     }
type GitWatcherControllerMock struct {
	// AddGenericHandlerFunc mocks the AddGenericHandler method.
	AddGenericHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// AddGenericRemoveHandlerFunc mocks the AddGenericRemoveHandler method.
	AddGenericRemoveHandlerFunc func(ctx context.Context, name string, handler generic.Handler)

	// CacheFunc mocks the Cache method.
	CacheFunc func() v1.GitWatcherCache

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.GitWatcher, error)

	// GroupVersionKindFunc mocks the GroupVersionKind method.
	GroupVersionKindFunc func() schema.GroupVersionKind

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.GitWatcherList, error)

	// OnChangeFunc mocks the OnChange method.
	OnChangeFunc func(ctx context.Context, name string, sync v1.GitWatcherHandler)

	// OnRemoveFunc mocks the OnRemove method.
	OnRemoveFunc func(ctx context.Context, name string, sync v1.GitWatcherHandler)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitWatcher, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error)

	// UpdaterFunc mocks the Updater method.
	UpdaterFunc func() generic.Updater

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGenericHandler holds details about calls to the AddGenericHandler method.
		AddGenericHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// AddGenericRemoveHandler holds details about calls to the AddGenericRemoveHandler method.
		AddGenericRemoveHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler generic.Handler
		}
		// Cache holds details about calls to the Cache method.
		Cache []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitWatcher
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// GroupVersionKind holds details about calls to the GroupVersionKind method.
		GroupVersionKind []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// OnChange holds details about calls to the OnChange method.
		OnChange []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.GitWatcherHandler
		}
		// OnRemove holds details about calls to the OnRemove method.
		OnRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1.GitWatcherHandler
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitWatcher
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitWatcher
		}
		// Updater holds details about calls to the Updater method.
		Updater []struct {
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddGenericHandler calls AddGenericHandlerFunc.
func (mock *GitWatcherControllerMock) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericHandlerFunc == nil {
		panic("GitWatcherControllerMock.AddGenericHandlerFunc: method is nil but GitWatcherController.AddGenericHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockGitWatcherControllerMockAddGenericHandler.Lock()
	mock.calls.AddGenericHandler = append(mock.calls.AddGenericHandler, callInfo)
	lockGitWatcherControllerMockAddGenericHandler.Unlock()
	mock.AddGenericHandlerFunc(ctx, name, handler)
}

// AddGenericHandlerCalls gets all the calls that were made to AddGenericHandler.
// Check the length with:
//     len(mockedGitWatcherController.AddGenericHandlerCalls())
func (mock *GitWatcherControllerMock) AddGenericHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockGitWatcherControllerMockAddGenericHandler.RLock()
	calls = mock.calls.AddGenericHandler
	lockGitWatcherControllerMockAddGenericHandler.RUnlock()
	return calls
}

// AddGenericRemoveHandler calls AddGenericRemoveHandlerFunc.
func (mock *GitWatcherControllerMock) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	if mock.AddGenericRemoveHandlerFunc == nil {
		panic("GitWatcherControllerMock.AddGenericRemoveHandlerFunc: method is nil but GitWatcherController.AddGenericRemoveHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockGitWatcherControllerMockAddGenericRemoveHandler.Lock()
	mock.calls.AddGenericRemoveHandler = append(mock.calls.AddGenericRemoveHandler, callInfo)
	lockGitWatcherControllerMockAddGenericRemoveHandler.Unlock()
	mock.AddGenericRemoveHandlerFunc(ctx, name, handler)
}

// AddGenericRemoveHandlerCalls gets all the calls that were made to AddGenericRemoveHandler.
// Check the length with:
//     len(mockedGitWatcherController.AddGenericRemoveHandlerCalls())
func (mock *GitWatcherControllerMock) AddGenericRemoveHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler generic.Handler
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler generic.Handler
	}
	lockGitWatcherControllerMockAddGenericRemoveHandler.RLock()
	calls = mock.calls.AddGenericRemoveHandler
	lockGitWatcherControllerMockAddGenericRemoveHandler.RUnlock()
	return calls
}

// Cache calls CacheFunc.
func (mock *GitWatcherControllerMock) Cache() v1.GitWatcherCache {
	if mock.CacheFunc == nil {
		panic("GitWatcherControllerMock.CacheFunc: method is nil but GitWatcherController.Cache was just called")
	}
	callInfo := struct {
	}{}
	lockGitWatcherControllerMockCache.Lock()
	mock.calls.Cache = append(mock.calls.Cache, callInfo)
	lockGitWatcherControllerMockCache.Unlock()
	return mock.CacheFunc()
}

// CacheCalls gets all the calls that were made to Cache.
// Check the length with:
//     len(mockedGitWatcherController.CacheCalls())
func (mock *GitWatcherControllerMock) CacheCalls() []struct {
} {
	var calls []struct {
	}
	lockGitWatcherControllerMockCache.RLock()
	calls = mock.calls.Cache
	lockGitWatcherControllerMockCache.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *GitWatcherControllerMock) Create(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error) {
	if mock.CreateFunc == nil {
		panic("GitWatcherControllerMock.CreateFunc: method is nil but GitWatcherController.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.GitWatcher
	}{
		In1: in1,
	}
	lockGitWatcherControllerMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockGitWatcherControllerMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedGitWatcherController.CreateCalls())
func (mock *GitWatcherControllerMock) CreateCalls() []struct {
	In1 *v1a.GitWatcher
} {
	var calls []struct {
		In1 *v1a.GitWatcher
	}
	lockGitWatcherControllerMockCreate.RLock()
	calls = mock.calls.Create
	lockGitWatcherControllerMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *GitWatcherControllerMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("GitWatcherControllerMock.DeleteFunc: method is nil but GitWatcherController.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGitWatcherControllerMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockGitWatcherControllerMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedGitWatcherController.DeleteCalls())
func (mock *GitWatcherControllerMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockGitWatcherControllerMockDelete.RLock()
	calls = mock.calls.Delete
	lockGitWatcherControllerMockDelete.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *GitWatcherControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("GitWatcherControllerMock.EnqueueFunc: method is nil but GitWatcherController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockGitWatcherControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockGitWatcherControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedGitWatcherController.EnqueueCalls())
func (mock *GitWatcherControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockGitWatcherControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockGitWatcherControllerMockEnqueue.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GitWatcherControllerMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.GitWatcher, error) {
	if mock.GetFunc == nil {
		panic("GitWatcherControllerMock.GetFunc: method is nil but GitWatcherController.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGitWatcherControllerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGitWatcherControllerMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGitWatcherController.GetCalls())
func (mock *GitWatcherControllerMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockGitWatcherControllerMockGet.RLock()
	calls = mock.calls.Get
	lockGitWatcherControllerMockGet.RUnlock()
	return calls
}

// GroupVersionKind calls GroupVersionKindFunc.
func (mock *GitWatcherControllerMock) GroupVersionKind() schema.GroupVersionKind {
	if mock.GroupVersionKindFunc == nil {
		panic("GitWatcherControllerMock.GroupVersionKindFunc: method is nil but GitWatcherController.GroupVersionKind was just called")
	}
	callInfo := struct {
	}{}
	lockGitWatcherControllerMockGroupVersionKind.Lock()
	mock.calls.GroupVersionKind = append(mock.calls.GroupVersionKind, callInfo)
	lockGitWatcherControllerMockGroupVersionKind.Unlock()
	return mock.GroupVersionKindFunc()
}

// GroupVersionKindCalls gets all the calls that were made to GroupVersionKind.
// Check the length with:
//     len(mockedGitWatcherController.GroupVersionKindCalls())
func (mock *GitWatcherControllerMock) GroupVersionKindCalls() []struct {
} {
	var calls []struct {
	}
	lockGitWatcherControllerMockGroupVersionKind.RLock()
	calls = mock.calls.GroupVersionKind
	lockGitWatcherControllerMockGroupVersionKind.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *GitWatcherControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("GitWatcherControllerMock.InformerFunc: method is nil but GitWatcherController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockGitWatcherControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockGitWatcherControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedGitWatcherController.InformerCalls())
func (mock *GitWatcherControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockGitWatcherControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockGitWatcherControllerMockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GitWatcherControllerMock) List(namespace string, opts v1b.ListOptions) (*v1a.GitWatcherList, error) {
	if mock.ListFunc == nil {
		panic("GitWatcherControllerMock.ListFunc: method is nil but GitWatcherController.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGitWatcherControllerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGitWatcherControllerMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGitWatcherController.ListCalls())
func (mock *GitWatcherControllerMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockGitWatcherControllerMockList.RLock()
	calls = mock.calls.List
	lockGitWatcherControllerMockList.RUnlock()
	return calls
}

// OnChange calls OnChangeFunc.
func (mock *GitWatcherControllerMock) OnChange(ctx context.Context, name string, sync v1.GitWatcherHandler) {
	if mock.OnChangeFunc == nil {
		panic("GitWatcherControllerMock.OnChangeFunc: method is nil but GitWatcherController.OnChange was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.GitWatcherHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockGitWatcherControllerMockOnChange.Lock()
	mock.calls.OnChange = append(mock.calls.OnChange, callInfo)
	lockGitWatcherControllerMockOnChange.Unlock()
	mock.OnChangeFunc(ctx, name, sync)
}

// OnChangeCalls gets all the calls that were made to OnChange.
// Check the length with:
//     len(mockedGitWatcherController.OnChangeCalls())
func (mock *GitWatcherControllerMock) OnChangeCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.GitWatcherHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.GitWatcherHandler
	}
	lockGitWatcherControllerMockOnChange.RLock()
	calls = mock.calls.OnChange
	lockGitWatcherControllerMockOnChange.RUnlock()
	return calls
}

// OnRemove calls OnRemoveFunc.
func (mock *GitWatcherControllerMock) OnRemove(ctx context.Context, name string, sync v1.GitWatcherHandler) {
	if mock.OnRemoveFunc == nil {
		panic("GitWatcherControllerMock.OnRemoveFunc: method is nil but GitWatcherController.OnRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1.GitWatcherHandler
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockGitWatcherControllerMockOnRemove.Lock()
	mock.calls.OnRemove = append(mock.calls.OnRemove, callInfo)
	lockGitWatcherControllerMockOnRemove.Unlock()
	mock.OnRemoveFunc(ctx, name, sync)
}

// OnRemoveCalls gets all the calls that were made to OnRemove.
// Check the length with:
//     len(mockedGitWatcherController.OnRemoveCalls())
func (mock *GitWatcherControllerMock) OnRemoveCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1.GitWatcherHandler
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1.GitWatcherHandler
	}
	lockGitWatcherControllerMockOnRemove.RLock()
	calls = mock.calls.OnRemove
	lockGitWatcherControllerMockOnRemove.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *GitWatcherControllerMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitWatcher, error) {
	if mock.PatchFunc == nil {
		panic("GitWatcherControllerMock.PatchFunc: method is nil but GitWatcherController.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockGitWatcherControllerMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockGitWatcherControllerMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedGitWatcherController.PatchCalls())
func (mock *GitWatcherControllerMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockGitWatcherControllerMockPatch.RLock()
	calls = mock.calls.Patch
	lockGitWatcherControllerMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *GitWatcherControllerMock) Update(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error) {
	if mock.UpdateFunc == nil {
		panic("GitWatcherControllerMock.UpdateFunc: method is nil but GitWatcherController.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.GitWatcher
	}{
		In1: in1,
	}
	lockGitWatcherControllerMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockGitWatcherControllerMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedGitWatcherController.UpdateCalls())
func (mock *GitWatcherControllerMock) UpdateCalls() []struct {
	In1 *v1a.GitWatcher
} {
	var calls []struct {
		In1 *v1a.GitWatcher
	}
	lockGitWatcherControllerMockUpdate.RLock()
	calls = mock.calls.Update
	lockGitWatcherControllerMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *GitWatcherControllerMock) UpdateStatus(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error) {
	if mock.UpdateStatusFunc == nil {
		panic("GitWatcherControllerMock.UpdateStatusFunc: method is nil but GitWatcherController.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.GitWatcher
	}{
		In1: in1,
	}
	lockGitWatcherControllerMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockGitWatcherControllerMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedGitWatcherController.UpdateStatusCalls())
func (mock *GitWatcherControllerMock) UpdateStatusCalls() []struct {
	In1 *v1a.GitWatcher
} {
	var calls []struct {
		In1 *v1a.GitWatcher
	}
	lockGitWatcherControllerMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockGitWatcherControllerMockUpdateStatus.RUnlock()
	return calls
}

// Updater calls UpdaterFunc.
func (mock *GitWatcherControllerMock) Updater() generic.Updater {
	if mock.UpdaterFunc == nil {
		panic("GitWatcherControllerMock.UpdaterFunc: method is nil but GitWatcherController.Updater was just called")
	}
	callInfo := struct {
	}{}
	lockGitWatcherControllerMockUpdater.Lock()
	mock.calls.Updater = append(mock.calls.Updater, callInfo)
	lockGitWatcherControllerMockUpdater.Unlock()
	return mock.UpdaterFunc()
}

// UpdaterCalls gets all the calls that were made to Updater.
// Check the length with:
//     len(mockedGitWatcherController.UpdaterCalls())
func (mock *GitWatcherControllerMock) UpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockGitWatcherControllerMockUpdater.RLock()
	calls = mock.calls.Updater
	lockGitWatcherControllerMockUpdater.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *GitWatcherControllerMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("GitWatcherControllerMock.WatchFunc: method is nil but GitWatcherController.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGitWatcherControllerMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockGitWatcherControllerMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedGitWatcherController.WatchCalls())
func (mock *GitWatcherControllerMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockGitWatcherControllerMockWatch.RLock()
	calls = mock.calls.Watch
	lockGitWatcherControllerMockWatch.RUnlock()
	return calls
}

var (
	lockGitWatcherClientMockCreate       sync.RWMutex
	lockGitWatcherClientMockDelete       sync.RWMutex
	lockGitWatcherClientMockGet          sync.RWMutex
	lockGitWatcherClientMockList         sync.RWMutex
	lockGitWatcherClientMockPatch        sync.RWMutex
	lockGitWatcherClientMockUpdate       sync.RWMutex
	lockGitWatcherClientMockUpdateStatus sync.RWMutex
	lockGitWatcherClientMockWatch        sync.RWMutex
)

// Ensure, that GitWatcherClientMock does implement GitWatcherClient.
// If this is not the case, regenerate this file with moq.
var _ v1.GitWatcherClient = &GitWatcherClientMock{}

// GitWatcherClientMock is a mock implementation of GitWatcherClient.
//
//     func TestSomethingThatUsesGitWatcherClient(t *testing.T) {
//
//         // make and configure a mocked GitWatcherClient
//         mockedGitWatcherClient := &GitWatcherClientMock{
//             CreateFunc: func(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(namespace string, name string, options v1b.GetOptions) (*v1a.GitWatcher, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, opts v1b.ListOptions) (*v1a.GitWatcherList, error) {
// 	               panic("mock out the List method")
//             },
//             PatchFunc: func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitWatcher, error) {
// 	               panic("mock out the Patch method")
//             },
//             UpdateFunc: func(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error) {
// 	               panic("mock out the Update method")
//             },
//             UpdateStatusFunc: func(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error) {
// 	               panic("mock out the UpdateStatus method")
//             },
//             WatchFunc: func(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedGitWatcherClient in code that requires GitWatcherClient
//         // and then make assertions.
//
//     }
type GitWatcherClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string, options v1b.GetOptions) (*v1a.GitWatcher, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, opts v1b.ListOptions) (*v1a.GitWatcherList, error)

	// PatchFunc mocks the Patch method.
	PatchFunc func(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitWatcher, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(namespace string, opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitWatcher
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// Patch holds details about calls to the Patch method.
		Patch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Pt is the pt argument value.
			Pt types.PatchType
			// Data is the data argument value.
			Data []byte
			// Subresources is the subresources argument value.
			Subresources []string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitWatcher
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// In1 is the in1 argument value.
			In1 *v1a.GitWatcher
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// Create calls CreateFunc.
func (mock *GitWatcherClientMock) Create(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error) {
	if mock.CreateFunc == nil {
		panic("GitWatcherClientMock.CreateFunc: method is nil but GitWatcherClient.Create was just called")
	}
	callInfo := struct {
		In1 *v1a.GitWatcher
	}{
		In1: in1,
	}
	lockGitWatcherClientMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockGitWatcherClientMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedGitWatcherClient.CreateCalls())
func (mock *GitWatcherClientMock) CreateCalls() []struct {
	In1 *v1a.GitWatcher
} {
	var calls []struct {
		In1 *v1a.GitWatcher
	}
	lockGitWatcherClientMockCreate.RLock()
	calls = mock.calls.Create
	lockGitWatcherClientMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *GitWatcherClientMock) Delete(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("GitWatcherClientMock.DeleteFunc: method is nil but GitWatcherClient.Delete was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGitWatcherClientMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockGitWatcherClientMockDelete.Unlock()
	return mock.DeleteFunc(namespace, name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedGitWatcherClient.DeleteCalls())
func (mock *GitWatcherClientMock) DeleteCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockGitWatcherClientMockDelete.RLock()
	calls = mock.calls.Delete
	lockGitWatcherClientMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GitWatcherClientMock) Get(namespace string, name string, options v1b.GetOptions) (*v1a.GitWatcher, error) {
	if mock.GetFunc == nil {
		panic("GitWatcherClientMock.GetFunc: method is nil but GitWatcherClient.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockGitWatcherClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGitWatcherClientMockGet.Unlock()
	return mock.GetFunc(namespace, name, options)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGitWatcherClient.GetCalls())
func (mock *GitWatcherClientMock) GetCalls() []struct {
	Namespace string
	Name      string
	Options   v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   v1b.GetOptions
	}
	lockGitWatcherClientMockGet.RLock()
	calls = mock.calls.Get
	lockGitWatcherClientMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GitWatcherClientMock) List(namespace string, opts v1b.ListOptions) (*v1a.GitWatcherList, error) {
	if mock.ListFunc == nil {
		panic("GitWatcherClientMock.ListFunc: method is nil but GitWatcherClient.List was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGitWatcherClientMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGitWatcherClientMockList.Unlock()
	return mock.ListFunc(namespace, opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGitWatcherClient.ListCalls())
func (mock *GitWatcherClientMock) ListCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockGitWatcherClientMockList.RLock()
	calls = mock.calls.List
	lockGitWatcherClientMockList.RUnlock()
	return calls
}

// Patch calls PatchFunc.
func (mock *GitWatcherClientMock) Patch(namespace string, name string, pt types.PatchType, data []byte, subresources ...string) (*v1a.GitWatcher, error) {
	if mock.PatchFunc == nil {
		panic("GitWatcherClientMock.PatchFunc: method is nil but GitWatcherClient.Patch was just called")
	}
	callInfo := struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}{
		Namespace:    namespace,
		Name:         name,
		Pt:           pt,
		Data:         data,
		Subresources: subresources,
	}
	lockGitWatcherClientMockPatch.Lock()
	mock.calls.Patch = append(mock.calls.Patch, callInfo)
	lockGitWatcherClientMockPatch.Unlock()
	return mock.PatchFunc(namespace, name, pt, data, subresources...)
}

// PatchCalls gets all the calls that were made to Patch.
// Check the length with:
//     len(mockedGitWatcherClient.PatchCalls())
func (mock *GitWatcherClientMock) PatchCalls() []struct {
	Namespace    string
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
} {
	var calls []struct {
		Namespace    string
		Name         string
		Pt           types.PatchType
		Data         []byte
		Subresources []string
	}
	lockGitWatcherClientMockPatch.RLock()
	calls = mock.calls.Patch
	lockGitWatcherClientMockPatch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *GitWatcherClientMock) Update(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error) {
	if mock.UpdateFunc == nil {
		panic("GitWatcherClientMock.UpdateFunc: method is nil but GitWatcherClient.Update was just called")
	}
	callInfo := struct {
		In1 *v1a.GitWatcher
	}{
		In1: in1,
	}
	lockGitWatcherClientMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockGitWatcherClientMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedGitWatcherClient.UpdateCalls())
func (mock *GitWatcherClientMock) UpdateCalls() []struct {
	In1 *v1a.GitWatcher
} {
	var calls []struct {
		In1 *v1a.GitWatcher
	}
	lockGitWatcherClientMockUpdate.RLock()
	calls = mock.calls.Update
	lockGitWatcherClientMockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *GitWatcherClientMock) UpdateStatus(in1 *v1a.GitWatcher) (*v1a.GitWatcher, error) {
	if mock.UpdateStatusFunc == nil {
		panic("GitWatcherClientMock.UpdateStatusFunc: method is nil but GitWatcherClient.UpdateStatus was just called")
	}
	callInfo := struct {
		In1 *v1a.GitWatcher
	}{
		In1: in1,
	}
	lockGitWatcherClientMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockGitWatcherClientMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(in1)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedGitWatcherClient.UpdateStatusCalls())
func (mock *GitWatcherClientMock) UpdateStatusCalls() []struct {
	In1 *v1a.GitWatcher
} {
	var calls []struct {
		In1 *v1a.GitWatcher
	}
	lockGitWatcherClientMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockGitWatcherClientMockUpdateStatus.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *GitWatcherClientMock) Watch(namespace string, opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("GitWatcherClientMock.WatchFunc: method is nil but GitWatcherClient.Watch was just called")
	}
	callInfo := struct {
		Namespace string
		Opts      v1b.ListOptions
	}{
		Namespace: namespace,
		Opts:      opts,
	}
	lockGitWatcherClientMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockGitWatcherClientMockWatch.Unlock()
	return mock.WatchFunc(namespace, opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedGitWatcherClient.WatchCalls())
func (mock *GitWatcherClientMock) WatchCalls() []struct {
	Namespace string
	Opts      v1b.ListOptions
} {
	var calls []struct {
		Namespace string
		Opts      v1b.ListOptions
	}
	lockGitWatcherClientMockWatch.RLock()
	calls = mock.calls.Watch
	lockGitWatcherClientMockWatch.RUnlock()
	return calls
}

var (
	lockGitWatcherCacheMockAddIndexer sync.RWMutex
	lockGitWatcherCacheMockGet        sync.RWMutex
	lockGitWatcherCacheMockGetByIndex sync.RWMutex
	lockGitWatcherCacheMockList       sync.RWMutex
)

// Ensure, that GitWatcherCacheMock does implement GitWatcherCache.
// If this is not the case, regenerate this file with moq.
var _ v1.GitWatcherCache = &GitWatcherCacheMock{}

// GitWatcherCacheMock is a mock implementation of GitWatcherCache.
//
//     func TestSomethingThatUsesGitWatcherCache(t *testing.T) {
//
//         // make and configure a mocked GitWatcherCache
//         mockedGitWatcherCache := &GitWatcherCacheMock{
//             AddIndexerFunc: func(indexName string, indexer v1.GitWatcherIndexer)  {
// 	               panic("mock out the AddIndexer method")
//             },
//             GetFunc: func(namespace string, name string) (*v1a.GitWatcher, error) {
// 	               panic("mock out the Get method")
//             },
//             GetByIndexFunc: func(indexName string, key string) ([]*v1a.GitWatcher, error) {
// 	               panic("mock out the GetByIndex method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1a.GitWatcher, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedGitWatcherCache in code that requires GitWatcherCache
//         // and then make assertions.
//
//     }
type GitWatcherCacheMock struct {
	// AddIndexerFunc mocks the AddIndexer method.
	AddIndexerFunc func(indexName string, indexer v1.GitWatcherIndexer)

	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1a.GitWatcher, error)

	// GetByIndexFunc mocks the GetByIndex method.
	GetByIndexFunc func(indexName string, key string) ([]*v1a.GitWatcher, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1a.GitWatcher, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddIndexer holds details about calls to the AddIndexer method.
		AddIndexer []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Indexer is the indexer argument value.
			Indexer v1.GitWatcherIndexer
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetByIndex holds details about calls to the GetByIndex method.
		GetByIndex []struct {
			// IndexName is the indexName argument value.
			IndexName string
			// Key is the key argument value.
			Key string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// AddIndexer calls AddIndexerFunc.
func (mock *GitWatcherCacheMock) AddIndexer(indexName string, indexer v1.GitWatcherIndexer) {
	if mock.AddIndexerFunc == nil {
		panic("GitWatcherCacheMock.AddIndexerFunc: method is nil but GitWatcherCache.AddIndexer was just called")
	}
	callInfo := struct {
		IndexName string
		Indexer   v1.GitWatcherIndexer
	}{
		IndexName: indexName,
		Indexer:   indexer,
	}
	lockGitWatcherCacheMockAddIndexer.Lock()
	mock.calls.AddIndexer = append(mock.calls.AddIndexer, callInfo)
	lockGitWatcherCacheMockAddIndexer.Unlock()
	mock.AddIndexerFunc(indexName, indexer)
}

// AddIndexerCalls gets all the calls that were made to AddIndexer.
// Check the length with:
//     len(mockedGitWatcherCache.AddIndexerCalls())
func (mock *GitWatcherCacheMock) AddIndexerCalls() []struct {
	IndexName string
	Indexer   v1.GitWatcherIndexer
} {
	var calls []struct {
		IndexName string
		Indexer   v1.GitWatcherIndexer
	}
	lockGitWatcherCacheMockAddIndexer.RLock()
	calls = mock.calls.AddIndexer
	lockGitWatcherCacheMockAddIndexer.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *GitWatcherCacheMock) Get(namespace string, name string) (*v1a.GitWatcher, error) {
	if mock.GetFunc == nil {
		panic("GitWatcherCacheMock.GetFunc: method is nil but GitWatcherCache.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockGitWatcherCacheMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockGitWatcherCacheMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedGitWatcherCache.GetCalls())
func (mock *GitWatcherCacheMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockGitWatcherCacheMockGet.RLock()
	calls = mock.calls.Get
	lockGitWatcherCacheMockGet.RUnlock()
	return calls
}

// GetByIndex calls GetByIndexFunc.
func (mock *GitWatcherCacheMock) GetByIndex(indexName string, key string) ([]*v1a.GitWatcher, error) {
	if mock.GetByIndexFunc == nil {
		panic("GitWatcherCacheMock.GetByIndexFunc: method is nil but GitWatcherCache.GetByIndex was just called")
	}
	callInfo := struct {
		IndexName string
		Key       string
	}{
		IndexName: indexName,
		Key:       key,
	}
	lockGitWatcherCacheMockGetByIndex.Lock()
	mock.calls.GetByIndex = append(mock.calls.GetByIndex, callInfo)
	lockGitWatcherCacheMockGetByIndex.Unlock()
	return mock.GetByIndexFunc(indexName, key)
}

// GetByIndexCalls gets all the calls that were made to GetByIndex.
// Check the length with:
//     len(mockedGitWatcherCache.GetByIndexCalls())
func (mock *GitWatcherCacheMock) GetByIndexCalls() []struct {
	IndexName string
	Key       string
} {
	var calls []struct {
		IndexName string
		Key       string
	}
	lockGitWatcherCacheMockGetByIndex.RLock()
	calls = mock.calls.GetByIndex
	lockGitWatcherCacheMockGetByIndex.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *GitWatcherCacheMock) List(namespace string, selector labels.Selector) ([]*v1a.GitWatcher, error) {
	if mock.ListFunc == nil {
		panic("GitWatcherCacheMock.ListFunc: method is nil but GitWatcherCache.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockGitWatcherCacheMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockGitWatcherCacheMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedGitWatcherCache.ListCalls())
func (mock *GitWatcherCacheMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockGitWatcherCacheMockList.RLock()
	calls = mock.calls.List
	lockGitWatcherCacheMockList.RUnlock()
	return calls
}
